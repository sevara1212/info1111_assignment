rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // 🔐 Common Helpers
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // 👤 Users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // 🧹 Maintenance Requests
    match /maintenance_requests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // 🚚 Lift Bookings
    match /lift_bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // 📄 Documents (Temporarily permissive for debugging)
    match /documents/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated(); // Temporarily allow any authenticated user
      allow update: if isAuthenticated(); // Temporarily allow any authenticated user  
      allow delete: if isAuthenticated(); // Temporarily allow any authenticated user
    }

    // 💬 Contact Messages (Fixed - allow users to update their own messages)
    match /contact_messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.from == request.auth.uid ||
        resource.data.to == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email ||
        resource.data.userEmail == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.to == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email ||
        resource.data.userEmail == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email ||
        isAdmin()
      );
      allow delete: if isAdmin();
    }

    // 💸 Levies
    match /levies/{levyId} {
      allow read: if isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.apartment ==
        resource.data.apartment || isAdmin()
      );
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // 🏋️ Amenity Payments
    match /amenity_payments/{paymentId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Allow authenticated users to read and write files
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
} 